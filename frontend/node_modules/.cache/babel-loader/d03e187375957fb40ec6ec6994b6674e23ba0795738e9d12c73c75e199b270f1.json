{"ast":null,"code":"import axios from \"axios\";\nconst axiosInstance = axios.create({\n  baseURL: \"http://localhost:8081\",\n  withCredentials: true,\n  headers: {\n    \"Content-Type\": \"application/json\",\n    Accept: \"application/json\"\n  },\n  timeout: 30000\n});\nconst isReactionRequest = (url = \"\") => {\n  return url.includes(\"/api/reactions/\");\n};\naxiosInstance.interceptors.request.use(config => {\n  try {\n    var _config$url;\n    const user = JSON.parse(localStorage.getItem(\"user\"));\n    if (user !== null && user !== void 0 && user.email && user !== null && user !== void 0 && user.rawPassword) {\n      const credentials = btoa(`${user.email}:${user.rawPassword}`);\n      config.headers.Authorization = `Basic ${credentials}`;\n    }\n    if ((_config$url = config.url) !== null && _config$url !== void 0 && _config$url.includes(\"/api/media/\")) {\n      config.responseType = \"blob\";\n      config.headers = {\n        ...config.headers,\n        Authorization: config.headers.Authorization,\n        Accept: \"*/*\",\n        \"Cache-Control\": \"no-cache\",\n        Pragma: \"no-cache\",\n        \"X-Requested-With\": \"XMLHttpRequest\"\n      };\n    }\n\n    // Special handling for reaction requests\n    if (isReactionRequest(config.url)) {\n      config.timeout = 10000; // 10s timeout for reactions\n      config.retryAttempts = 3; // Allow 3 retries\n    }\n    return config;\n  } catch (error) {\n    console.error(\"Auth error:\", error);\n    return config;\n  }\n}, error => Promise.reject(error));\n\n// Update response interceptor with better error handling\naxiosInstance.interceptors.response.use(response => {\n  if (response.config.responseType === \"blob\") {\n    // Check if the blob is an error response\n    if (response.data.type === \"application/json\") {\n      return response.data.text().then(text => {\n        const error = JSON.parse(text);\n        return Promise.reject(error);\n      });\n    }\n    // Create object URL for media\n    const blobUrl = URL.createObjectURL(response.data);\n    response.data = blobUrl;\n  }\n  return response;\n}, async error => {\n  var _error$config, _error$config2, _error$response, _error$response2;\n  const requestTime = new Date().toISOString();\n  const endpoint = ((_error$config = error.config) === null || _error$config === void 0 ? void 0 : _error$config.url) || \"unknown endpoint\";\n\n  // Handle reaction request errors\n  if (isReactionRequest((_error$config2 = error.config) === null || _error$config2 === void 0 ? void 0 : _error$config2.url)) {\n    var _error$config3;\n    if (error.code === \"ECONNABORTED\" && ((_error$config3 = error.config) === null || _error$config3 === void 0 ? void 0 : _error$config3.retryAttempts) > 0) {\n      error.config.retryAttempts--;\n      return new Promise(resolve => setTimeout(resolve, 1000)).then(() => axiosInstance(error.config));\n    }\n  }\n  if (error.code === \"ERR_NETWORK\") {\n    var _error$config4, _error$config4$url;\n    console.error(`[${requestTime}] Network Error - Backend may be down: ${endpoint}`, error);\n\n    // Add retry logic for media requests\n    if ((_error$config4 = error.config) !== null && _error$config4 !== void 0 && (_error$config4$url = _error$config4.url) !== null && _error$config4$url !== void 0 && _error$config4$url.includes(\"/api/media/\")) {\n      const retryConfig = {\n        ...error.config,\n        retry: (error.config.retry || 0) + 1\n      };\n      if (retryConfig.retry <= 3) {\n        return new Promise(resolve => setTimeout(resolve, 1000)).then(() => axiosInstance.request(retryConfig));\n      }\n    }\n  } else if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 403) {\n    console.error(`[${requestTime}] Authentication error at ${endpoint}:`, error);\n    // Don't automatically redirect from profile pages to avoid loops\n    if (!window.location.pathname.includes(\"/profile/\")) {\n      localStorage.removeItem(\"user\");\n      window.location.href = \"/login\";\n    }\n  } else if (((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status) === 404) {\n    var _error$config5, _error$config5$url;\n    console.error(`[${requestTime}] Resource not found at ${endpoint}:`, error);\n    // Handle 404 errors differently depending on the endpoint\n    if ((_error$config5 = error.config) !== null && _error$config5 !== void 0 && (_error$config5$url = _error$config5.url) !== null && _error$config5$url !== void 0 && _error$config5$url.includes(\"/api/users/\")) {\n      // Let the component handle user not found\n      return Promise.reject({\n        ...error,\n        isUserNotFound: true,\n        message: \"User not found\"\n      });\n    }\n  } else {\n    console.error(`[${requestTime}] API error at ${endpoint}:`, error);\n  }\n  return Promise.reject(error);\n});\n\n// Add cleanup utility\naxiosInstance.revokeObjectURL = url => {\n  if (url && url.startsWith(\"blob:\")) {\n    URL.revokeObjectURL(url);\n  }\n};\n\n// Add new method for media uploads with custom timeout\naxiosInstance.uploadMedia = (url, data, options = {}) => {\n  return axiosInstance({\n    url,\n    method: \"POST\",\n    data,\n    timeout: 120000,\n    // 2 minutes timeout for uploads\n    headers: {\n      \"Content-Type\": \"multipart/form-data\"\n    },\n    ...options\n  });\n};\nexport default axiosInstance;","map":{"version":3,"names":["axios","axiosInstance","create","baseURL","withCredentials","headers","Accept","timeout","isReactionRequest","url","includes","interceptors","request","use","config","_config$url","user","JSON","parse","localStorage","getItem","email","rawPassword","credentials","btoa","Authorization","responseType","Pragma","retryAttempts","error","console","Promise","reject","response","data","type","text","then","blobUrl","URL","createObjectURL","_error$config","_error$config2","_error$response","_error$response2","requestTime","Date","toISOString","endpoint","_error$config3","code","resolve","setTimeout","_error$config4","_error$config4$url","retryConfig","retry","status","window","location","pathname","removeItem","href","_error$config5","_error$config5$url","isUserNotFound","message","revokeObjectURL","startsWith","uploadMedia","options","method"],"sources":["C:/Users/chath/Downloads/y3paf/skill-bridge/frontend/src/utils/axios.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\nconst axiosInstance = axios.create({\r\n  baseURL: \"http://localhost:8081\",\r\n  withCredentials: true,\r\n  headers: {\r\n    \"Content-Type\": \"application/json\",\r\n    Accept: \"application/json\",\r\n  },\r\n  timeout: 30000,\r\n});\r\n\r\nconst isReactionRequest = (url = \"\") => {\r\n  return url.includes(\"/api/reactions/\");\r\n};\r\n\r\naxiosInstance.interceptors.request.use(\r\n  (config) => {\r\n    try {\r\n      const user = JSON.parse(localStorage.getItem(\"user\"));\r\n\r\n      if (user?.email && user?.rawPassword) {\r\n        const credentials = btoa(`${user.email}:${user.rawPassword}`);\r\n        config.headers.Authorization = `Basic ${credentials}`;\r\n      }\r\n\r\n      if (config.url?.includes(\"/api/media/\")) {\r\n        config.responseType = \"blob\";\r\n        config.headers = {\r\n          ...config.headers,\r\n          Authorization: config.headers.Authorization,\r\n          Accept: \"*/*\",\r\n          \"Cache-Control\": \"no-cache\",\r\n          Pragma: \"no-cache\",\r\n          \"X-Requested-With\": \"XMLHttpRequest\",\r\n        };\r\n      }\r\n\r\n      // Special handling for reaction requests\r\n      if (isReactionRequest(config.url)) {\r\n        config.timeout = 10000; // 10s timeout for reactions\r\n        config.retryAttempts = 3; // Allow 3 retries\r\n      }\r\n\r\n      return config;\r\n    } catch (error) {\r\n      console.error(\"Auth error:\", error);\r\n      return config;\r\n    }\r\n  },\r\n  (error) => Promise.reject(error)\r\n);\r\n\r\n// Update response interceptor with better error handling\r\naxiosInstance.interceptors.response.use(\r\n  (response) => {\r\n    if (response.config.responseType === \"blob\") {\r\n      // Check if the blob is an error response\r\n      if (response.data.type === \"application/json\") {\r\n        return response.data.text().then((text) => {\r\n          const error = JSON.parse(text);\r\n          return Promise.reject(error);\r\n        });\r\n      }\r\n      // Create object URL for media\r\n      const blobUrl = URL.createObjectURL(response.data);\r\n      response.data = blobUrl;\r\n    }\r\n    return response;\r\n  },\r\n  async (error) => {\r\n    const requestTime = new Date().toISOString();\r\n    const endpoint = error.config?.url || \"unknown endpoint\";\r\n\r\n    // Handle reaction request errors\r\n    if (isReactionRequest(error.config?.url)) {\r\n      if (error.code === \"ECONNABORTED\" && error.config?.retryAttempts > 0) {\r\n        error.config.retryAttempts--;\r\n        return new Promise((resolve) => setTimeout(resolve, 1000)).then(() =>\r\n          axiosInstance(error.config)\r\n        );\r\n      }\r\n    }\r\n\r\n    if (error.code === \"ERR_NETWORK\") {\r\n      console.error(\r\n        `[${requestTime}] Network Error - Backend may be down: ${endpoint}`,\r\n        error\r\n      );\r\n\r\n      // Add retry logic for media requests\r\n      if (error.config?.url?.includes(\"/api/media/\")) {\r\n        const retryConfig = {\r\n          ...error.config,\r\n          retry: (error.config.retry || 0) + 1,\r\n        };\r\n        if (retryConfig.retry <= 3) {\r\n          return new Promise((resolve) => setTimeout(resolve, 1000)).then(() =>\r\n            axiosInstance.request(retryConfig)\r\n          );\r\n        }\r\n      }\r\n    } else if (error.response?.status === 403) {\r\n      console.error(\r\n        `[${requestTime}] Authentication error at ${endpoint}:`,\r\n        error\r\n      );\r\n      // Don't automatically redirect from profile pages to avoid loops\r\n      if (!window.location.pathname.includes(\"/profile/\")) {\r\n        localStorage.removeItem(\"user\");\r\n        window.location.href = \"/login\";\r\n      }\r\n    } else if (error.response?.status === 404) {\r\n      console.error(\r\n        `[${requestTime}] Resource not found at ${endpoint}:`,\r\n        error\r\n      );\r\n      // Handle 404 errors differently depending on the endpoint\r\n      if (error.config?.url?.includes(\"/api/users/\")) {\r\n        // Let the component handle user not found\r\n        return Promise.reject({\r\n          ...error,\r\n          isUserNotFound: true,\r\n          message: \"User not found\",\r\n        });\r\n      }\r\n    } else {\r\n      console.error(`[${requestTime}] API error at ${endpoint}:`, error);\r\n    }\r\n\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Add cleanup utility\r\naxiosInstance.revokeObjectURL = (url) => {\r\n  if (url && url.startsWith(\"blob:\")) {\r\n    URL.revokeObjectURL(url);\r\n  }\r\n};\r\n\r\n// Add new method for media uploads with custom timeout\r\naxiosInstance.uploadMedia = (url, data, options = {}) => {\r\n  return axiosInstance({\r\n    url,\r\n    method: \"POST\",\r\n    data,\r\n    timeout: 120000, // 2 minutes timeout for uploads\r\n    headers: {\r\n      \"Content-Type\": \"multipart/form-data\",\r\n    },\r\n    ...options,\r\n  });\r\n};\r\n\r\nexport default axiosInstance;\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,aAAa,GAAGD,KAAK,CAACE,MAAM,CAAC;EACjCC,OAAO,EAAE,uBAAuB;EAChCC,eAAe,EAAE,IAAI;EACrBC,OAAO,EAAE;IACP,cAAc,EAAE,kBAAkB;IAClCC,MAAM,EAAE;EACV,CAAC;EACDC,OAAO,EAAE;AACX,CAAC,CAAC;AAEF,MAAMC,iBAAiB,GAAGA,CAACC,GAAG,GAAG,EAAE,KAAK;EACtC,OAAOA,GAAG,CAACC,QAAQ,CAAC,iBAAiB,CAAC;AACxC,CAAC;AAEDT,aAAa,CAACU,YAAY,CAACC,OAAO,CAACC,GAAG,CACnCC,MAAM,IAAK;EACV,IAAI;IAAA,IAAAC,WAAA;IACF,MAAMC,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,CAAC;IAErD,IAAIJ,IAAI,aAAJA,IAAI,eAAJA,IAAI,CAAEK,KAAK,IAAIL,IAAI,aAAJA,IAAI,eAAJA,IAAI,CAAEM,WAAW,EAAE;MACpC,MAAMC,WAAW,GAAGC,IAAI,CAAC,GAAGR,IAAI,CAACK,KAAK,IAAIL,IAAI,CAACM,WAAW,EAAE,CAAC;MAC7DR,MAAM,CAACT,OAAO,CAACoB,aAAa,GAAG,SAASF,WAAW,EAAE;IACvD;IAEA,KAAAR,WAAA,GAAID,MAAM,CAACL,GAAG,cAAAM,WAAA,eAAVA,WAAA,CAAYL,QAAQ,CAAC,aAAa,CAAC,EAAE;MACvCI,MAAM,CAACY,YAAY,GAAG,MAAM;MAC5BZ,MAAM,CAACT,OAAO,GAAG;QACf,GAAGS,MAAM,CAACT,OAAO;QACjBoB,aAAa,EAAEX,MAAM,CAACT,OAAO,CAACoB,aAAa;QAC3CnB,MAAM,EAAE,KAAK;QACb,eAAe,EAAE,UAAU;QAC3BqB,MAAM,EAAE,UAAU;QAClB,kBAAkB,EAAE;MACtB,CAAC;IACH;;IAEA;IACA,IAAInB,iBAAiB,CAACM,MAAM,CAACL,GAAG,CAAC,EAAE;MACjCK,MAAM,CAACP,OAAO,GAAG,KAAK,CAAC,CAAC;MACxBO,MAAM,CAACc,aAAa,GAAG,CAAC,CAAC,CAAC;IAC5B;IAEA,OAAOd,MAAM;EACf,CAAC,CAAC,OAAOe,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,aAAa,EAAEA,KAAK,CAAC;IACnC,OAAOf,MAAM;EACf;AACF,CAAC,EACAe,KAAK,IAAKE,OAAO,CAACC,MAAM,CAACH,KAAK,CACjC,CAAC;;AAED;AACA5B,aAAa,CAACU,YAAY,CAACsB,QAAQ,CAACpB,GAAG,CACpCoB,QAAQ,IAAK;EACZ,IAAIA,QAAQ,CAACnB,MAAM,CAACY,YAAY,KAAK,MAAM,EAAE;IAC3C;IACA,IAAIO,QAAQ,CAACC,IAAI,CAACC,IAAI,KAAK,kBAAkB,EAAE;MAC7C,OAAOF,QAAQ,CAACC,IAAI,CAACE,IAAI,CAAC,CAAC,CAACC,IAAI,CAAED,IAAI,IAAK;QACzC,MAAMP,KAAK,GAAGZ,IAAI,CAACC,KAAK,CAACkB,IAAI,CAAC;QAC9B,OAAOL,OAAO,CAACC,MAAM,CAACH,KAAK,CAAC;MAC9B,CAAC,CAAC;IACJ;IACA;IACA,MAAMS,OAAO,GAAGC,GAAG,CAACC,eAAe,CAACP,QAAQ,CAACC,IAAI,CAAC;IAClDD,QAAQ,CAACC,IAAI,GAAGI,OAAO;EACzB;EACA,OAAOL,QAAQ;AACjB,CAAC,EACD,MAAOJ,KAAK,IAAK;EAAA,IAAAY,aAAA,EAAAC,cAAA,EAAAC,eAAA,EAAAC,gBAAA;EACf,MAAMC,WAAW,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;EAC5C,MAAMC,QAAQ,GAAG,EAAAP,aAAA,GAAAZ,KAAK,CAACf,MAAM,cAAA2B,aAAA,uBAAZA,aAAA,CAAchC,GAAG,KAAI,kBAAkB;;EAExD;EACA,IAAID,iBAAiB,EAAAkC,cAAA,GAACb,KAAK,CAACf,MAAM,cAAA4B,cAAA,uBAAZA,cAAA,CAAcjC,GAAG,CAAC,EAAE;IAAA,IAAAwC,cAAA;IACxC,IAAIpB,KAAK,CAACqB,IAAI,KAAK,cAAc,IAAI,EAAAD,cAAA,GAAApB,KAAK,CAACf,MAAM,cAAAmC,cAAA,uBAAZA,cAAA,CAAcrB,aAAa,IAAG,CAAC,EAAE;MACpEC,KAAK,CAACf,MAAM,CAACc,aAAa,EAAE;MAC5B,OAAO,IAAIG,OAAO,CAAEoB,OAAO,IAAKC,UAAU,CAACD,OAAO,EAAE,IAAI,CAAC,CAAC,CAACd,IAAI,CAAC,MAC9DpC,aAAa,CAAC4B,KAAK,CAACf,MAAM,CAC5B,CAAC;IACH;EACF;EAEA,IAAIe,KAAK,CAACqB,IAAI,KAAK,aAAa,EAAE;IAAA,IAAAG,cAAA,EAAAC,kBAAA;IAChCxB,OAAO,CAACD,KAAK,CACX,IAAIgB,WAAW,0CAA0CG,QAAQ,EAAE,EACnEnB,KACF,CAAC;;IAED;IACA,KAAAwB,cAAA,GAAIxB,KAAK,CAACf,MAAM,cAAAuC,cAAA,gBAAAC,kBAAA,GAAZD,cAAA,CAAc5C,GAAG,cAAA6C,kBAAA,eAAjBA,kBAAA,CAAmB5C,QAAQ,CAAC,aAAa,CAAC,EAAE;MAC9C,MAAM6C,WAAW,GAAG;QAClB,GAAG1B,KAAK,CAACf,MAAM;QACf0C,KAAK,EAAE,CAAC3B,KAAK,CAACf,MAAM,CAAC0C,KAAK,IAAI,CAAC,IAAI;MACrC,CAAC;MACD,IAAID,WAAW,CAACC,KAAK,IAAI,CAAC,EAAE;QAC1B,OAAO,IAAIzB,OAAO,CAAEoB,OAAO,IAAKC,UAAU,CAACD,OAAO,EAAE,IAAI,CAAC,CAAC,CAACd,IAAI,CAAC,MAC9DpC,aAAa,CAACW,OAAO,CAAC2C,WAAW,CACnC,CAAC;MACH;IACF;EACF,CAAC,MAAM,IAAI,EAAAZ,eAAA,GAAAd,KAAK,CAACI,QAAQ,cAAAU,eAAA,uBAAdA,eAAA,CAAgBc,MAAM,MAAK,GAAG,EAAE;IACzC3B,OAAO,CAACD,KAAK,CACX,IAAIgB,WAAW,6BAA6BG,QAAQ,GAAG,EACvDnB,KACF,CAAC;IACD;IACA,IAAI,CAAC6B,MAAM,CAACC,QAAQ,CAACC,QAAQ,CAAClD,QAAQ,CAAC,WAAW,CAAC,EAAE;MACnDS,YAAY,CAAC0C,UAAU,CAAC,MAAM,CAAC;MAC/BH,MAAM,CAACC,QAAQ,CAACG,IAAI,GAAG,QAAQ;IACjC;EACF,CAAC,MAAM,IAAI,EAAAlB,gBAAA,GAAAf,KAAK,CAACI,QAAQ,cAAAW,gBAAA,uBAAdA,gBAAA,CAAgBa,MAAM,MAAK,GAAG,EAAE;IAAA,IAAAM,cAAA,EAAAC,kBAAA;IACzClC,OAAO,CAACD,KAAK,CACX,IAAIgB,WAAW,2BAA2BG,QAAQ,GAAG,EACrDnB,KACF,CAAC;IACD;IACA,KAAAkC,cAAA,GAAIlC,KAAK,CAACf,MAAM,cAAAiD,cAAA,gBAAAC,kBAAA,GAAZD,cAAA,CAActD,GAAG,cAAAuD,kBAAA,eAAjBA,kBAAA,CAAmBtD,QAAQ,CAAC,aAAa,CAAC,EAAE;MAC9C;MACA,OAAOqB,OAAO,CAACC,MAAM,CAAC;QACpB,GAAGH,KAAK;QACRoC,cAAc,EAAE,IAAI;QACpBC,OAAO,EAAE;MACX,CAAC,CAAC;IACJ;EACF,CAAC,MAAM;IACLpC,OAAO,CAACD,KAAK,CAAC,IAAIgB,WAAW,kBAAkBG,QAAQ,GAAG,EAAEnB,KAAK,CAAC;EACpE;EAEA,OAAOE,OAAO,CAACC,MAAM,CAACH,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACA5B,aAAa,CAACkE,eAAe,GAAI1D,GAAG,IAAK;EACvC,IAAIA,GAAG,IAAIA,GAAG,CAAC2D,UAAU,CAAC,OAAO,CAAC,EAAE;IAClC7B,GAAG,CAAC4B,eAAe,CAAC1D,GAAG,CAAC;EAC1B;AACF,CAAC;;AAED;AACAR,aAAa,CAACoE,WAAW,GAAG,CAAC5D,GAAG,EAAEyB,IAAI,EAAEoC,OAAO,GAAG,CAAC,CAAC,KAAK;EACvD,OAAOrE,aAAa,CAAC;IACnBQ,GAAG;IACH8D,MAAM,EAAE,MAAM;IACdrC,IAAI;IACJ3B,OAAO,EAAE,MAAM;IAAE;IACjBF,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACD,GAAGiE;EACL,CAAC,CAAC;AACJ,CAAC;AAED,eAAerE,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}